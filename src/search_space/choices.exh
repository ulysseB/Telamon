// TODO(cc_perf): expose reduce instructions in a separate set
// FIXME: shared memory is not forbidden when the dimensions of the tmp mem are unsized
// - solution: a value object, superset of memblock, with a location in REG | SHARED | GLOBAL

set BasicBlocks:
  item_type = "ir::BasicBlock"
  id_type = "ir::BBId"
  item_getter = "$fun.block($id)"
  id_getter = "$item.bb_id()"
  iterator = "$fun.blocks()"
  var_prefix = "bb"
  new_objs = "$objs.basic_blocks"
end

set Instructions subsetof BasicBlocks:
  item_type = "ir::Instruction"
  id_type = "ir::InstId"
  item_getter = "$fun.inst($id)"
  id_getter = "$item.id()"
  iterator = "$fun.insts()"
  var_prefix = "inst"
  from_superset = "$item.as_inst()"
  new_objs = "$objs.instructions"
end

set MemInsts subsetof Instructions:
  item_type = "ir::Instruction"
  id_type = "ir::InstId"
  item_getter = "$fun.inst($id)"
  id_getter = "$item.id()"
  iterator = "$fun.mem_insts()"
  var_prefix = "inst"
  from_superset = "$item.as_mem_inst()"
  new_objs = "$objs.mem_insts"
end

set Dimensions subsetof BasicBlocks:
  disjoint: Instructions
  item_type = "ir::Dimension"
  id_type = "ir::dim::Id"
  item_getter = "$fun.dim($id)"
  id_getter = "$item.id()"
  iterator = "$fun.dims()"
  var_prefix = "dim"
  from_superset = "$item.as_dim()"
  new_objs = "$objs.dimensions"
end

set StaticDims subsetof Dimensions:
  item_type = "ir::Dimension"
  id_type = "ir::dim::Id"
  item_getter = "$fun.dim($id)"
  id_getter = "$item.id()"
  // TODO(cc_perf): dedicated iterator
  iterator = "$fun.dims().flat_map(|d| d.size().as_int().map(|_| d))"
  var_prefix = "dim"
  from_superset = "$item.size().as_int().map(|_| $item)"
  new_objs = "$objs.static_dims"
end

set MemBlocks:
  item_type = "ir::mem::Block"
  id_type = "ir::mem::Id"
  item_getter = "$fun.mem_block($id)"
  id_getter = "$item.mem_id()"
  iterator = "$fun.mem_blocks()"
  var_prefix = "mem"
  new_objs = "$objs.mem_blocks"
end

set InternalMemBlocks subsetof MemBlocks:
  item_type = "ir::mem::InternalBlock"
  id_type = "ir::mem::InternalId"
  item_getter = "$fun.internal_mem_block($id)"
  id_getter = "$item.id()"
  iterator = "$fun.internal_mem_blocks()"
  var_prefix = "mem"
  from_superset = "$item.as_internal()"
  new_objs = "$objs.internal_mem_blocks"
end

quotient IterationDims($inst in Instructions) of $dim in Dimensions:
  is_iteration_dim = order($dim, $inst) is OUTER / order is MERGED
  item_type = "ir::Dimension"
  id_type = "ir::dim::Id"
  item_getter = "$fun.dim($id)"
  id_getter = "$item.id()"
  iterator = "$inst.iteration_dims().iter().map(|&d| $fun.dim(d))"
  var_prefix = "iter_dim"
  new_objs = "$objs.iteration_dims"
  from_superset = "$inst.iteration_dims().get(&$item.id()).map(|_| $item)"
  reverse forall $dim in Dimensions = "$dim.iterated().map(|id| $fun.inst(id))"
  add_to_set = "::search_space::add_iteration_dim($fun, $inst, $item)"
end

quotient ThreadDims of $dim in StaticDims:
  is_thread_dim = dim_kind($dim) is THREAD / thread_mapping is MAPPED
  item_type = "ir::Dimension"
  id_type = "ir::dim::Id"
  item_getter = "$fun.dim($id)"
  id_getter = "$item.id()"
  iterator = "$fun.thread_dims()"
  var_prefix = "thread_dim"
  new_objs = "$objs.thread_dims"
  from_superset = "(if $item.is_thread_dim() { Some($item) } else { None })"
  add_to_set = "::search_space::add_thread_dim($fun, $item)"
end

/// Strip-mining factor of a striped-mined dimension.
define integer size($dim in StaticDims): "&[unwrap!($dim.size().as_int()) as u16]" end

/// Specifies how iteration dimensions are implemented.
define enum dim_kind($dim in Dimensions):
  /// The dimension is implemented as a regular loop.
  value LOOP:
  /// The dimension is fully unrolled.
  value UNROLL:
    requires "$dim.size().is_constant()"
    // It doesn't makes sens to unroll outer loops.
    requires forall $other_dim in Dimensions:
      order($other_dim, $dim) is not INNER || dim_kind($other_dim) is VECTOR | UNROLL
  /// The dimension is implemented by using a vector instruction.
  value VECTOR:
    requires "$dim.size().is_constant()"
    requires forall $other_dim in Dimensions:
      order($dim, $other_dim) is not OUTER
    requires forall $inst in Instructions:
      order($dim, $inst) is not OUTER || "$fun.device().can_vectorize($dim, $inst.operator())"
  /// The dimension is mapped to a block dimension on the device.
  value BLOCK:
    requires forall $other_dim in Dimensions:
      dim_kind($other_dim) is BLOCK || order($dim, $other_dim) is OUTER
    requires forall $other in BasicBlocks:
      order($dim, $other) is NESTED | MERGED
  /// The dimension is mapped to a thread dimension on the device.
  value THREAD:
    requires "$dim.size().is_constant()"
  /// The dimension is parallel.
  alias PARALLEL = BLOCK | THREAD | VECTOR:
  /// The dimension is sequential.
  alias SEQUENTIAL = LOOP | UNROLL:
end

/// Indicates where a memory block is located.
define enum mem_space($mem in MemBlocks):
  /// The block is in the device RAM.
  value GLOBAL:
    requires forall $inst in MemInsts:
      "unwrap!($inst.operator().mem_used()) != $mem.mem_id()"
        || inst_flag($inst) is MEM_GLOBAL
  /// The block is in the memory shared between the threads of a block.
  value SHARED:
    requires "$mem.as_internal().is_some()"
    requires forall $inst in MemInsts:
      "unwrap!($inst.operator().mem_used()) != $mem.mem_id()"
        || inst_flag($inst) is MEM_SHARED
end

/// Specifies the version of an instruction to use.
define enum inst_flag($inst in MemInsts):
  /// Access the global memory using both L1 and L2 cache. Coherence is not guaranteed
  /// between blocks.
  value MEM_CA:
    requires "$fun.device().supports_l1_access()"
  /// Access the global memory using the L2 cache.
  value MEM_CG:
    requires "$fun.device().supports_l2_access()"
  /// Access the global memory without using caches.
  value MEM_CS:
  /// Access the global memory using the read-only cache. Coherence is not guaranteed.
  value MEM_NC:
    requires "$inst.operator().supports_nc_access()"
    requires "$fun.device().supports_nc_access()"
  /// Access the shared memory.
  value MEM_SHARED:
  /// Access the global memory.
  alias MEM_GLOBAL = MEM_CA | MEM_CG | MEM_CS | MEM_NC:
  /// Ensure coherency between memory accesses.
  alias MEM_COHERENT = MEM_SHARED | MEM_CG | MEM_CS:
  /// Ensure coherency within a block between memory accesses.
  alias MEM_BLOCK_COHERENT = MEM_COHERENT | MEM_CA:
end

/// Defines how two basic blocks are ordered.
define enum order($lhs in BasicBlocks, $rhs in BasicBlocks):
  antisymmetric:
    BEFORE -> AFTER
    INNER -> OUTER
  /// $lhs is executed before $rhs.
  value BEFORE:
  /// $lhs is executed after $rhs.
  value AFTER:
  /// $lhs is nested inside $rhs.
  value INNER:
  /// $rhs is nested outside $rhs.
  value OUTER:
  /// $lhs and $rhs are merged.
  value MERGED:

  /// $lhs and $rhs are nested.
  alias NESTED = INNER | OUTER:
  /// $lhs and $rhs are sequentially ordered.
  alias ORDERED = BEFORE | AFTER:
end

// Constraint triangles of orders
require forall $lhs in BasicBlocks:
  forall $mid in BasicBlocks:
    forall $rhs in BasicBlocks:
      // BEFORE is transitive
      order($lhs, $rhs) is BEFORE || order($lhs, $mid) is not BEFORE
        || order($mid, $rhs) is not BEFORE
      // INNER is transitive
      order($lhs, $rhs) is INNER || order($lhs, $mid) is not INNER
        || order($mid, $rhs) is not INNER
      // OUTER preseve the sequential ordering
      order($lhs, $rhs) == order($lhs, $mid) || order($lhs, $mid) is not ORDERED
        || order($mid, $rhs) is not OUTER
      // Two blocks outer a third one are nested.
      order($lhs, $mid) is not OUTER || order($rhs, $mid) is not OUTER
        || order($lhs, $rhs) is NESTED | MERGED
      // MERGED requires similar orderings on both sides
      order($lhs, $rhs) is not MERGED || order($rhs, $mid) == order($lhs, $mid)

// Intruction orders
require forall $inst in Instructions:
  forall $bb in BasicBlocks:
    order($inst, $bb) is INNER | ORDERED

require forall $inst in Instructions:
  forall $dim in Dimensions:
    "$inst.iteration_dims().contains(&$dim.id())" || "!$inst.has_side_effects()"
      || is_iteration_dim($inst, $dim) is FALSE

require forall $lhs in Dimensions:
  forall $rhs in Dimensions:
    // Merge constraitns
    "$lhs.size().is_compatible_with($rhs.size())" || order($lhs, $rhs) is not MERGED
    dim_kind($lhs) == dim_kind($rhs) || order($lhs, $rhs) is not MERGED

// Merge constraint for static dimensions.
require forall $lhs in StaticDims:
  forall $rhs in StaticDims:
    size($lhs) == size($rhs) || order($lhs, $rhs) is not MERGED

/// Specifies the valid mappings between two dimensions.
define enum dim_mapping($lhs in Dimensions, $rhs in Dimensions):
  symmetric
  /// The dimensions cannot be mapped through registers.
  value NOT_MAPPED:
  /// Values may be transmitted using multiple registers within a thread
  value UNROLL_MAP:
    requires dim_kind($lhs) is UNROLL | VECTOR || order($lhs, $rhs) is MERGED
  /// Values may be transmitted using one register for each thread.
  value THREAD_MAP:
    requires "$lhs.size().is_constant()"
  /// Values are transmitted through registers.
  alias MAPPED = UNROLL_MAP | THREAD_MAP:
end

require forall $lhs in StaticDims:
  forall $rhs in StaticDims:
    thread_mapping($lhs, $rhs) is MAPPED || dim_mapping($lhs, $rhs) is not THREAD_MAP
    thread_mapping($lhs, $rhs) is not MAPPED || size($lhs) == size($rhs)

/// Indicates how are thread dimensions mapped on the GPU.
define enum thread_mapping($lhs in StaticDims, $rhs in StaticDims):
  antisymmetric:
    MAPPED_OUT -> MAPPED_IN
  /// One of the dimensions is a not thread.
  value NOT_THREADS:
    requires dim_kind($lhs) is not THREAD || dim_kind($rhs) is not THREAD
  /// The two dimensions are threads mapped to the same dimension on the GPU.
  value MAPPED:
    requires dim_kind($lhs) is THREAD
    requires dim_kind($rhs) is THREAD
    requires order($lhs, $rhs) is MERGED | ORDERED
    requires size($lhs) == size($rhs)
  /// The two dimensions are threads, but `lhs` is mapped to a dimension outside of `rhs`.
  value MAPPED_OUT:
    requires dim_kind($lhs) is THREAD
    requires dim_kind($rhs) is THREAD
    requires order($lhs, $rhs) is OUTER | ORDERED
  /// The two dimensions are threads, but `lhs` is mapped to a dimension inside of `rhs`.
  value MAPPED_IN:
    requires dim_kind($lhs) is THREAD
    requires dim_kind($rhs) is THREAD
    requires order($lhs, $rhs) is INNER | ORDERED
end

// Enforce coherence between threads activations.
require forall $lhs in StaticDims:
  forall $rhs in StaticDims:
    forall $other in StaticDims:
      thread_mapping($lhs, $rhs) is not MAPPED ||
        thread_mapping($lhs, $other) == thread_mapping($rhs, $other)
      thread_mapping($lhs, $other) is not MAPPED_OUT ||
        thread_mapping($other, $rhs) is not MAPPED_OUT ||
        thread_mapping($lhs, $rhs) is MAPPED_OUT

// Thread dimensions are grouped together
require forall $outer in Dimensions:
  forall $inner in Dimensions:
    forall $mid in Dimensions:
      order($outer, $mid) is not OUTER || order($mid, $inner) is not OUTER
        || dim_kind($outer) is not THREAD || dim_kind($inner) is not THREAD
        || dim_kind($mid) is THREAD

// outer thread dimensions are limited to a size of 64.
require forall $outer in StaticDims:
  forall $inner in StaticDims:
    thread_mapping($outer, $inner) is not MAPPED_OUT
      || size($outer) <= "64"

// A basic block nested with a thread dimension is nested or merged with the other
require forall $bb in BasicBlocks:
  forall $nested_thread in Dimensions:
    forall $other_thread in Dimensions:
      order($bb, $nested_thread) is not NESTED || dim_kind($nested_thread) is not THREAD
        || order($other_thread, $nested_thread) is not NESTED
        || dim_kind($other_thread) is not THREAD
        || order($bb, $other_thread) is not ORDERED

/// Limits the number of threads.
define half counter num_threads():
  forall $dim in StaticDims:
    mul size($dim) when:
      is_thread_dim($dim) is TRUE
end

require num_threads() <= "$fun.device().max_threads()"

/// Limits the number of thread dimensions.
define half counter num_thread_dims():
  forall $dim in StaticDims:
    sum "1" when: is_thread_dim($dim) is TRUE
end

require num_thread_dims() <= "3"

/// Limits the number of nested unrolled loop.
define half counter unroll_factor($inst in Instructions):
  forall $dim in StaticDims:
    mul size($dim) when:
      is_iteration_dim($inst, $dim) is TRUE
      dim_kind($dim) is UNROLL
end

/// Limits the number of block dimensions.
define half counter num_block_dims($inst in Instructions):
  forall $dim in Dimensions:
    sum "1" when:
      is_iteration_dim($inst, $dim) is TRUE
      dim_kind($dim) is BLOCK
end

require forall $inst in Instructions:
  unroll_factor($inst) <= "$fun.device().max_unrolling()"
  num_block_dims($inst) <= "$fun.device().max_block_dims()"

/// Counts the number on instructions nested in each dimension.
define half counter num_nested_inst($dim in StaticDims):
  forall $inst in Instructions:
    sum "1" when:
      order($dim, $inst) is OUTER
end

require forall $dim in StaticDims:
  dim_kind($dim) is not VECTOR || num_nested_inst($dim) <= "1"

require forall $dim in Dimensions:
  forall $init in Instructions:
    forall $reduce in Instructions:
      "!$reduce.is_reduction_common_dim($init.id(), $dim.id())"
        || is_iteration_dim($reduce, $dim) is FALSE || order($dim, $init) is OUTER

// dim_map lowering.
trigger forall $lhs in Dimensions:
  forall $rhs in Dimensions:
    "::search_space::dim_map::dim_not_mapped($lhs, $rhs, ir_instance)"
      when dim_mapping($lhs, $rhs) is NOT_MAPPED && "$lhs.id() < $rhs.id()"

// Layout Lowering.
trigger forall $lhs in Dimensions:
  forall $rhs in Dimensions:
    "::search_space::dim_map::dim_not_merged($lhs, $rhs, ir_instance)"
      when order($lhs, $rhs) is not MERGED && "$lhs.id() < $rhs.id()"

// Merge lowering
trigger forall $lhs in Dimensions:
  forall $rhs in Dimensions:
    "::search_space::merge_dims($lhs, $rhs, ir_instance)"
      when order($lhs, $rhs) is MERGED && "$lhs.id() > $rhs.id()"

/// Computes the size of each memory block.
// TODO(cleanup): use dependent sets to only iterate on necessary pairs.
// FIXME: remove cubic choice choices
define half counter mem_size($mem in InternalMemBlocks):
  base "$mem.base_size()"
  forall $lhs in StaticDims:
    forall $rhs in StaticDims:
      mul size($lhs) when:
        "$mem.maps_dims($lhs.id(), $rhs.id())"
        order($lhs, $rhs) is not MERGED
end

/// The total amount of shared memory used.
define half counter shared_mem_used():
  forall $mem in InternalMemBlocks:
    sum mem_size($mem) when: mem_space($mem) is SHARED
end

// Cannot use more shared memory that what is available.
require shared_mem_used() <= "$fun.device().shared_mem()"
